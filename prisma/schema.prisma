// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model User {
    id            String    @id @default(uuid())
    name          String
    image         String    @db.Text
    email         String    @unique @db.Text
    emailVerified DateTime?

    accounts Account[]
    sessions Session[]

    servers  Server[]
    members  Member[]
    channels Channel[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Server {
    id         String @id @default(uuid())
    name       String
    image      String @db.Text
    inviteCode String @unique

    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    members  Member[]
    channels Channel[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([userId])
}

enum MemberRole {
    ADMIN
    MODERATOR
    GUEST
}

model Member {
    id       String     @id @default(uuid())
    role     MemberRole @default(GUEST)
    nickname String?

    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    serverId String
    server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

    @@index([userId])
    @@index([serverId])
}

enum ChannelType {
    TEXT
    AUDIO
    VIDEO
}

model Channel {
    id   String      @id @default(uuid())
    name String
    type ChannelType @default(TEXT)

    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    serverId String
    server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([userId])
    @@index([serverId])
}
